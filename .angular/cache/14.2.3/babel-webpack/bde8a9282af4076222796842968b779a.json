{"ast":null,"code":"import _classCallCheck from \"C:/Users/Fritz7x64/Documents/Angular/astro-info/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Fritz7x64/Documents/Angular/astro-info/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { HttpClient } from '@angular/common/http';\nimport { map, catchError } from 'rxjs';\nimport { Globals } from 'common/globals';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport var NasaService = /*#__PURE__*/(function () {\n  var NasaService = /*#__PURE__*/function () {\n    function NasaService(_http) {\n      _classCallCheck(this, NasaService);\n\n      this._http = _http;\n      this.api_key = Globals.NASA_API_KEY;\n    }\n\n    _createClass(NasaService, [{\n      key: \"getApod\",\n      value: function getApod() {\n        if (Globals.API_SOURCE == 0) {\n          // Frontend\n          return this._http.get('https://api.nasa.gov/planetary/apod?api_key=' + this.api_key).pipe(map(function (request) {\n            return request;\n          })).pipe(catchError(function (err) {\n            throw \"Error fetching data from server: \" + err;\n          }));\n        }\n\n        if (Globals.API_SOURCE == 1) {\n          // Backend\n          return this._http.get(Globals.MONGODB_API_URL + '/apod').pipe(map(function (request) {\n            return request;\n          })).pipe(catchError(function (err) {\n            throw \"Error fetching data from server: \" + err;\n          }));\n        }\n      }\n    }, {\n      key: \"getNeo\",\n      value: function getNeo(start_date, end_date) {\n        if (Globals.API_SOURCE == 0) {\n          // Frontend\n          return this._http.get('https://api.nasa.gov/neo/rest/v1/feed?start_date=' + start_date + '&end_date=' + end_date + '&api_key=' + this.api_key).pipe(map(function (request) {\n            return request;\n          })).pipe(catchError(function (err) {\n            throw \"Error fetching data from server: \" + err;\n          }));\n        }\n\n        if (Globals.API_SOURCE == 1) {\n          // Backend\n          return this._http.get(Globals.MONGODB_API_URL + '/neo?start_date=' + start_date + '&end_date=' + end_date).pipe(map(function (request) {\n            return request;\n          })).pipe(catchError(function (err) {\n            throw \"Error fetching data from server: \" + err;\n          }));\n        }\n      }\n    }, {\n      key: \"getNeoDetails\",\n      value: function getNeoDetails(id) {\n        if (Globals.API_SOURCE == 0) {\n          // Frontend\n          return this._http.get('https://api.nasa.gov/neo/rest/v1/neo/' + id + '?api_key=' + this.api_key).pipe(map(function (request) {\n            return request;\n          })).pipe(catchError(function (err) {\n            throw \"Error fetching data from server: \" + err;\n          }));\n        }\n\n        if (Globals.API_SOURCE == 1) {\n          // Backend\n          return this._http.get(Globals.MONGODB_API_URL + '/neodetails?id=' + id).pipe(map(function (request) {\n            return request;\n          })).pipe(catchError(function (err) {\n            throw \"Error fetching data from server: \" + err;\n          }));\n        }\n      }\n    }]);\n\n    return NasaService;\n  }();\n\n  NasaService.ɵfac = function NasaService_Factory(t) {\n    return new (t || NasaService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  NasaService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NasaService,\n    factory: NasaService.ɵfac\n  });\n  return NasaService;\n})();","map":null,"metadata":{},"sourceType":"module"}