{"ast":null,"code":"import _classCallCheck from \"C:/Users/Fritz7x64/Documents/Angular/astro-info/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Fritz7x64/Documents/Angular/astro-info/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { FirebaseAuthService } from './shared/firebase.auth.service';\nimport { WeatherService } from './shared/weather.service';\nimport { UserSettingsService } from './shared/user.settings.service';\nimport { TranslationsService } from './shared/translations.service';\nimport { Router } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport 'rxjs/add/operator/do';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./shared/firebase.auth.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"./shared/weather.service\";\nimport * as i4 from \"./shared/user.settings.service\";\nimport * as i5 from \"./shared/translations.service\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"ng2-charts\";\nimport * as i8 from \"@angular/google-maps\";\n\nfunction WeatherComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.errorMessageWeatherService, \" \");\n  }\n}\n\nfunction WeatherComponent_div_14_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 21)(1, \"h4\", 22)(2, \"b\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelement(4, \"img\", 23);\n    i0.ɵɵelementStart(5, \"h5\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"h1\")(8, \"b\");\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(10, \"h5\", 24);\n    i0.ɵɵtext(11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(12, \"br\");\n    i0.ɵɵelementStart(13, \"h5\", 25);\n    i0.ɵɵtext(14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"h5\", 25);\n    i0.ɵɵtext(16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"h5\", 24);\n    i0.ɵɵtext(18);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    var ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngClass\", ctx_r4.currentConditions[0].IsDayTime == true ? \"current-weather-display-day\" : \"current-weather-display-night\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r4.location.LocalizedName);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"src\", ctx_r4.getIconPath(ctx_r4.currentConditions[0].WeatherIcon), i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r4.currentConditions[0].WeatherText);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r4.convertInt(ctx_r4.currentConditions[0].Temperature.Metric.Value), \"\\xB0C\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\"\", ctx_r4.convertTime(ctx_r4.currentConditions[0].LocalObservationDateTime), \" \", ctx_r4.location.TimeZone.Code, \"\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate4(\"\", ctx_r4.t_WeatherComponent_Wind, \": \", ctx_r4.convertInt(ctx_r4.currentConditions[0].Wind.Speed.Metric.Value), \" \", ctx_r4.currentConditions[0].Wind.Speed.Metric.Unit, \" \", ctx_r4.currentConditions[0].Wind.Direction.Localized, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate3(\"\", ctx_r4.t_WeatherComponent_Visibility, \": \", ctx_r4.convertInt(ctx_r4.currentConditions[0].Visibility.Metric.Value), \" \", ctx_r4.currentConditions[0].Visibility.Metric.Unit, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\"\", ctx_r4.t_WeatherComponent_CloudCover, \": \", ctx_r4.convertInt(ctx_r4.currentConditions[0].CloudCover), \"%\");\n  }\n}\n\nfunction WeatherComponent_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, WeatherComponent_div_14_div_1_Template, 19, 16, \"div\", 20);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.location && ctx_r1.currentConditions);\n  }\n}\n\nfunction WeatherComponent_div_16_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 28)(1, \"div\", 29)(2, \"h5\", 30)(3, \"b\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelement(5, \"img\", 23);\n    i0.ɵɵelementStart(6, \"h5\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"h3\")(9, \"b\");\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelement(11, \"br\");\n    i0.ɵɵelementStart(12, \"h5\", 25);\n    i0.ɵɵtext(13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"h5\", 25);\n    i0.ɵɵtext(15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"h5\", 25);\n    i0.ɵɵtext(17);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(18, \"h5\", 25);\n    i0.ɵɵtext(19);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(20, \"h5\", 25);\n    i0.ɵɵtext(21);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(22, \"br\");\n    i0.ɵɵelementStart(23, \"h5\", 25);\n    i0.ɵɵtext(24);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(25, \"h5\", 25);\n    i0.ɵɵtext(26);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(27, \"h5\", 25);\n    i0.ɵɵtext(28);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(29, \"h5\", 25);\n    i0.ɵɵtext(30);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(31, \"h5\", 24);\n    i0.ɵɵtext(32);\n    i0.ɵɵelementEnd()()();\n  }\n\n  if (rf & 2) {\n    var dailyForecast_r6 = ctx.$implicit;\n    var ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate2(\"\", ctx_r5.getDayOfWeek(dailyForecast_r6.Date), \" / \", ctx_r5.convertDate(dailyForecast_r6.Date), \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"src\", ctx_r5.getIconPath(dailyForecast_r6.Night.Icon), i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(dailyForecast_r6.Night.IconPhrase);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r5.convertInt(dailyForecast_r6.Temperature.Minimum.Value), \"\\xB0C\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate4(\"\", ctx_r5.t_WeatherComponent_Wind, \": \", ctx_r5.convertInt(dailyForecast_r6.Night.Wind.Speed.Value), \" \", dailyForecast_r6.Night.Wind.Speed.Unit, \" \", dailyForecast_r6.Night.Wind.Direction.Localized, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\"\", ctx_r5.t_WeatherComponent_RainProbability, \": \", ctx_r5.convertInt(dailyForecast_r6.Night.RainProbability), \"%\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\"\", ctx_r5.t_WeatherComponent_SnowProbability, \": \", ctx_r5.convertInt(dailyForecast_r6.Night.SnowProbability), \"%\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\"\", ctx_r5.t_WeatherComponent_IceProbability, \": \", ctx_r5.convertInt(dailyForecast_r6.Night.IceProbability), \"%\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\"\", ctx_r5.t_WeatherComponent_CloudCover, \": \", ctx_r5.convertInt(dailyForecast_r6.Night.CloudCover), \"%\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate2(\"\", ctx_r5.t_WeatherComponent_Sunrise, \": \", ctx_r5.convertTime(dailyForecast_r6.Sun.Rise), \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\"\", ctx_r5.t_WeatherComponent_Sunset, \": \", ctx_r5.convertTime(dailyForecast_r6.Sun.Set), \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\"\", ctx_r5.t_WeatherComponent_Moonrise, \": \", ctx_r5.convertTime(dailyForecast_r6.Moon.Rise), \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\"\", ctx_r5.t_WeatherComponent_Moonset, \": \", ctx_r5.convertTime(dailyForecast_r6.Moon.Set), \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\"\", ctx_r5.t_WeatherComponent_MoonAge, \": \", dailyForecast_r6.Moon.Age, \"\");\n  }\n}\n\nfunction WeatherComponent_div_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 26);\n    i0.ɵɵtemplate(1, WeatherComponent_div_16_div_1_Template, 33, 27, \"div\", 27);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.dailyForecasts.DailyForecasts);\n  }\n}\n\nfunction WeatherComponent_div_20_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 28)(1, \"div\", 21)(2, \"h5\", 30)(3, \"b\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelement(5, \"img\", 23);\n    i0.ɵɵelementStart(6, \"h5\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"h3\")(9, \"b\");\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelement(11, \"br\");\n    i0.ɵɵelementStart(12, \"h5\", 25);\n    i0.ɵɵtext(13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"h5\", 24);\n    i0.ɵɵtext(15);\n    i0.ɵɵelementEnd()()();\n  }\n\n  if (rf & 2) {\n    var hourlyForecast_r8 = ctx.$implicit;\n    var ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", hourlyForecast_r8.IsDaylight == true ? \"hourly-forecast-display-day\" : \"hourly-forecast-display-night\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate2(\"\", ctx_r7.getDayOfWeek(hourlyForecast_r8.DateTime), \" / \", ctx_r7.convertTime(hourlyForecast_r8.DateTime), \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"src\", ctx_r7.getIconPath(hourlyForecast_r8.WeatherIcon), i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(hourlyForecast_r8.IconPhrase);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r7.convertInt(hourlyForecast_r8.Temperature.Value), \"\\xB0C\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate2(\"\", ctx_r7.t_WeatherComponent_Rain, \": \", ctx_r7.convertInt(hourlyForecast_r8.RainProbability), \"%\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\"\", ctx_r7.t_WeatherComponent_Clouds, \": \", ctx_r7.convertInt(hourlyForecast_r8.CloudCover), \"%\");\n  }\n}\n\nfunction WeatherComponent_div_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, WeatherComponent_div_20_div_1_Template, 16, 10, \"div\", 27);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.hourlyForecasts);\n  }\n}\n\nexport var WeatherComponent = /*#__PURE__*/(function () {\n  var WeatherComponent = /*#__PURE__*/function () {\n    function WeatherComponent(_firebaseAuthService, _router, _weatherService, _userSettingsService, _translationsService) {\n      _classCallCheck(this, WeatherComponent);\n\n      this._firebaseAuthService = _firebaseAuthService;\n      this._router = _router;\n      this._weatherService = _weatherService;\n      this._userSettingsService = _userSettingsService;\n      this._translationsService = _translationsService; // Variables for Google Maps\n\n      this.zoom = 10; // lat: number = 45.814440;\n      // lng: number = 15.977980;\n\n      this.draggable = true; // Variables for various error messages\n\n      this.errorMessageWeatherService = \"\"; // Variables for user settings\n\n      this.lat = 0;\n      this.lng = 0;\n      this.timeZoneRawOffset = 0;\n      this.languageId = 0;\n      this.itemsPerPage = 0;\n      this.pagesPerPageset = 0;\n      this.userSettings = {\n        lat: 0,\n        lng: 0,\n        timeZoneRawOffset: 0,\n        languageId: 0,\n        itemsPerPage: 0,\n        pagesPerPageset: 0\n      }; // Variables for charts\n\n      this.barChartType = 'bar';\n      this.barChartLabelsDaily = [];\n      this.barChartDataDaily = [{\n        data: [],\n        label: \"\"\n      }, {\n        data: [],\n        label: \"\"\n      }];\n      this.barChartLabelsHourly = [];\n      this.barChartDataHourly = [{\n        data: [],\n        label: \"\"\n      }, {\n        data: [],\n        label: \"\"\n      }]; // Variables for translations\n\n      this.t_WeatherComponent_PanelTitle = \"Weather conditions and forecasts\";\n      this.t_WeatherComponent_MapTitle = \"Click on map or drag marker to get weather conditions and forecasts for chosen place\";\n      this.t_WeatherComponent_Sun = \"Sun\";\n      this.t_WeatherComponent_Mon = \"Mon\";\n      this.t_WeatherComponent_Tue = \"Tue\";\n      this.t_WeatherComponent_Wed = \"Wed\";\n      this.t_WeatherComponent_Thu = \"Thu\";\n      this.t_WeatherComponent_Fri = \"Fri\";\n      this.t_WeatherComponent_Sat = \"Sat\";\n      this.t_WeatherComponent_Wind = \"Wind\";\n      this.t_WeatherComponent_Visibility = \"Visibility\";\n      this.t_WeatherComponent_CloudCover = \"Cloud cover\";\n      this.t_WeatherComponent_RainProbability = \"Rain prob.\";\n      this.t_WeatherComponent_SnowProbability = \"Snow prob.\";\n      this.t_WeatherComponent_IceProbability = \"Ice prob.\";\n      this.t_WeatherComponent_Sunrise = \"Sun rise\";\n      this.t_WeatherComponent_Sunset = \"Sun set\";\n      this.t_WeatherComponent_Moonrise = \"Moon rise\";\n      this.t_WeatherComponent_Moonset = \"Moon set\";\n      this.t_WeatherComponent_MoonAge = \"Moon age\";\n      this.t_WeatherComponent_Rain = \"Rain\";\n      this.t_WeatherComponent_Clouds = \"Clouds\";\n    }\n\n    _createClass(WeatherComponent, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        var _this = this;\n\n        var p = this._firebaseAuthService.listenForAuthStateChanges();\n\n        p.then(function (user) {\n          _this.isLoggedIn = true;\n          _this.currentUser = user; // Use user settings from service\n\n          _this.lat = _this._userSettingsService.lat;\n          _this.lng = _this._userSettingsService.lng;\n          _this.timeZoneRawOffset = _this._userSettingsService.timeZoneRawOffset;\n          _this.languageId = _this._userSettingsService.languageId;\n          _this.itemsPerPage = _this._userSettingsService.itemsPerPage;\n          _this.pagesPerPageset = _this._userSettingsService.pagesPerPageset; // Get weather details for chose place\n\n          _this.getWeatherDetails(); // Translations\n\n\n          _this.translate(); // Update chart's label and fill it's data with 100ms delay because of issues with chart.js\n\n\n          setTimeout(function () {\n            _this.barChartDataDaily[0].label = _this.t_WeatherComponent_CloudCover + \" (%)\";\n            _this.barChartDataDaily[1].label = _this.t_WeatherComponent_RainProbability + \" (%)\";\n            _this.barChartDataHourly[0].label = _this.t_WeatherComponent_CloudCover + \" (%)\";\n            _this.barChartDataHourly[1].label = _this.t_WeatherComponent_RainProbability + \" (%)\";\n          }, 1000);\n        }).catch(function (value) {\n          _this.isLoggedIn = false;\n\n          _this._router.navigate(['/']);\n        });\n      }\n    }, {\n      key: \"onMapClick\",\n      value: function onMapClick($event) {\n        // Set lat and lng for clicked place\n        this.lat = $event.coords.lat;\n        this.lng = $event.coords.lng; // Get weather details for chose place\n\n        this.getWeatherDetails();\n      }\n    }, {\n      key: \"onMarkerDragEnd\",\n      value: function onMarkerDragEnd($event) {\n        // Set lat and lng for clicked place\n        this.lat = $event.coords.lat;\n        this.lng = $event.coords.lng; // Get weather details for chose place\n\n        this.getWeatherDetails();\n      }\n    }, {\n      key: \"getWeatherDetails\",\n      value: function getWeatherDetails() {\n        var _this2 = this;\n\n        // Get weather details for chosen place\n        this._weatherService.getLocation(this.lat.toString(), this.lng.toString(), this._translationsService.languageidentifier).do(function (location) {\n          return _this2.location = location;\n        }).switchMap(function (location) {\n          if (location !== null && location !== undefined) {\n            // Location found, get current conditions\n            _this2.locationKey = location.Key;\n            return _this2._weatherService.getCurrentConditions(_this2.locationKey, _this2._translationsService.languageidentifier);\n          } else {\n            // Location not found, don' try to get current conditions for place that does not exist\n            return of(null);\n          }\n        }).switchMap(function (currentConditions) {\n          if (currentConditions !== null && currentConditions !== undefined) {\n            // Everything ok, set current conditions for that place and get daily forecasts\n            _this2.currentConditions = currentConditions;\n            return _this2._weatherService.getDailyForecast(_this2.locationKey, _this2._translationsService.languageidentifier);\n          } else {\n            // Reset current conditions and dont' try to get daily forecasts\n            _this2.currentConditions = null;\n            return of(null);\n          }\n        }).switchMap(function (dailyForecasts) {\n          if (dailyForecasts !== null && dailyForecasts !== undefined) {\n            // Everything ok, set daily forecasts for that place and get hourly forecasts\n            _this2.dailyForecasts = dailyForecasts; // Get labels and data for cloud cover and rain probability weather graphs\n\n            var labels = [];\n            var arr = [];\n            setTimeout(function () {\n              dailyForecasts.DailyForecasts.forEach(function (el) {\n                arr.push(_this2.getDayOfWeek(el.Date) + ' / ' + _this2.convertDate(el.Date));\n                arr.push(\"\");\n                arr.push(_this2.t_WeatherComponent_Sunrise + \": \" + _this2.convertTime(el.Sun.Rise));\n                arr.push(_this2.t_WeatherComponent_Sunset + \": \" + _this2.convertTime(el.Sun.Set));\n                arr.push(_this2.t_WeatherComponent_Moonrise + \": \" + _this2.convertTime(el.Moon.Rise));\n                arr.push(_this2.t_WeatherComponent_Moonset + \": \" + _this2.convertTime(el.Moon.Set));\n                arr.push(_this2.t_WeatherComponent_MoonAge + \": \" + el.Moon.Age);\n                arr.push(\"\");\n                labels.push(arr);\n                arr = [];\n              });\n              _this2.barChartLabelsDaily = labels;\n              _this2.barChartDataDaily[0].data = dailyForecasts.DailyForecasts.map(function (el) {\n                return _this2.convertInt(el.Night.CloudCover);\n              });\n              _this2.barChartDataDaily[1].data = dailyForecasts.DailyForecasts.map(function (el) {\n                return _this2.convertInt(el.Night.RainProbability);\n              });\n            }, 1000); // Return\n\n            return _this2._weatherService.getHourlyForecast(_this2.locationKey, _this2._translationsService.languageidentifier);\n          } else {\n            // Reset daily forecasts and don't try to get hourly forecasts\n            _this2.dailyForecasts = null;\n            return of(null);\n          }\n        }).subscribe(function (hourlyForecasts) {\n          if (hourlyForecasts !== null && hourlyForecasts !== undefined) {\n            // Everything ok, set hourly forecasts for that place\n            _this2.hourlyForecasts = hourlyForecasts; // Get labels and data for cloud cover and rain probability weather graphs\n\n            var labels = [];\n            setTimeout(function () {\n              hourlyForecasts.forEach(function (el) {\n                // labels.push(this.getDayOfWeek(el.DateTime) + ' / ' + this.convertTime(el.DateTime));\n                labels.push(_this2.getDayOfWeek(el.DateTime) + \" \" + _this2.convertHours(el.DateTime) + \"h\");\n              });\n              _this2.barChartLabelsHourly = labels;\n              _this2.barChartDataHourly[0].data = hourlyForecasts.map(function (el) {\n                return _this2.convertInt(el.CloudCover);\n              });\n              _this2.barChartDataHourly[1].data = hourlyForecasts.map(function (el) {\n                return _this2.convertInt(el.RainProbability);\n              });\n            }, 1000); // Reset any observable errors if there were any, so alert is not displayed any more\n\n            _this2.errorMessageWeatherService = \"\";\n          } else {\n            // Reset hourly forecasts\n            _this2.hourlyForecasts = null;\n          }\n        }, function (err) {\n          return _this2.errorMessageWeatherService = err;\n        });\n      }\n    }, {\n      key: \"convertInt\",\n      value: function convertInt(value) {\n        if (!value) {\n          return 0;\n        }\n\n        ;\n        return Math.round(parseFloat(value));\n      }\n    }, {\n      key: \"convertTime\",\n      value: function convertTime(value) {\n        if (!value) {\n          return \"\";\n        }\n\n        ;\n        var s = value.substring(11, 16);\n        return s;\n      }\n    }, {\n      key: \"convertHours\",\n      value: function convertHours(value) {\n        if (!value) {\n          return \"\";\n        }\n\n        ;\n        var s = value.substring(11, 13);\n        return s;\n      }\n    }, {\n      key: \"convertDate\",\n      value: function convertDate(value) {\n        if (!value) {\n          return \"\";\n        }\n\n        ;\n        var s = value.substring(8, 10) + \".\" + value.substring(5, 7) + \".\";\n        return s;\n      }\n    }, {\n      key: \"getIconPath\",\n      value: function getIconPath(icon) {\n        return \"/assets/accuweather/img/\" + (icon < 10 ? \"0\" : \"\") + icon + \"-s.png\";\n      }\n    }, {\n      key: \"getDayOfWeek\",\n      value: function getDayOfWeek(value) {\n        if (!value) {\n          return \"\";\n        }\n\n        ;\n        var d = new Date(value.slice(0, 19));\n        var weekday = new Array(7);\n        weekday[0] = this.t_WeatherComponent_Sun;\n        weekday[1] = this.t_WeatherComponent_Mon;\n        weekday[2] = this.t_WeatherComponent_Tue;\n        weekday[3] = this.t_WeatherComponent_Wed;\n        weekday[4] = this.t_WeatherComponent_Thu;\n        weekday[5] = this.t_WeatherComponent_Fri;\n        weekday[6] = this.t_WeatherComponent_Sat;\n        var s = weekday[d.getDay()];\n        return s;\n      }\n    }, {\n      key: \"translate\",\n      value: function translate() {\n        var _this3 = this;\n\n        if (this._translationsService.translationsSetToVariables === false) {\n          this._translationsService.setTranslationsForLanguage(this._userSettingsService.languageId).then(function () {\n            _this3.t_WeatherComponent_PanelTitle = _this3._translationsService.t_WeatherComponent_PanelTitle;\n            _this3.t_WeatherComponent_MapTitle = _this3._translationsService.t_WeatherComponent_MapTitle;\n            _this3.t_WeatherComponent_Sun = _this3._translationsService.t_WeatherComponent_Sun;\n            _this3.t_WeatherComponent_Mon = _this3._translationsService.t_WeatherComponent_Mon;\n            _this3.t_WeatherComponent_Tue = _this3._translationsService.t_WeatherComponent_Tue;\n            _this3.t_WeatherComponent_Wed = _this3._translationsService.t_WeatherComponent_Wed;\n            _this3.t_WeatherComponent_Thu = _this3._translationsService.t_WeatherComponent_Thu;\n            _this3.t_WeatherComponent_Fri = _this3._translationsService.t_WeatherComponent_Fri;\n            _this3.t_WeatherComponent_Sat = _this3._translationsService.t_WeatherComponent_Sat;\n            _this3.t_WeatherComponent_Wind = _this3._translationsService.t_WeatherComponent_Wind;\n            _this3.t_WeatherComponent_Visibility = _this3._translationsService.t_WeatherComponent_Visibility;\n            _this3.t_WeatherComponent_CloudCover = _this3._translationsService.t_WeatherComponent_CloudCover;\n            _this3.t_WeatherComponent_RainProbability = _this3._translationsService.t_WeatherComponent_RainProbability;\n            _this3.t_WeatherComponent_SnowProbability = _this3._translationsService.t_WeatherComponent_SnowProbability;\n            _this3.t_WeatherComponent_IceProbability = _this3._translationsService.t_WeatherComponent_IceProbability;\n            _this3.t_WeatherComponent_Sunrise = _this3._translationsService.t_WeatherComponent_Sunrise;\n            _this3.t_WeatherComponent_Sunset = _this3._translationsService.t_WeatherComponent_Sunset;\n            _this3.t_WeatherComponent_Moonrise = _this3._translationsService.t_WeatherComponent_Moonrise;\n            _this3.t_WeatherComponent_Moonset = _this3._translationsService.t_WeatherComponent_Moonset;\n            _this3.t_WeatherComponent_MoonAge = _this3._translationsService.t_WeatherComponent_MoonAge;\n            _this3.t_WeatherComponent_Rain = _this3._translationsService.t_WeatherComponent_Rain;\n            _this3.t_WeatherComponent_Clouds = _this3._translationsService.t_WeatherComponent_Clouds;\n          });\n        } else {\n          this.t_WeatherComponent_PanelTitle = this._translationsService.t_WeatherComponent_PanelTitle;\n          this.t_WeatherComponent_MapTitle = this._translationsService.t_WeatherComponent_MapTitle;\n          this.t_WeatherComponent_Sun = this._translationsService.t_WeatherComponent_Sun;\n          this.t_WeatherComponent_Mon = this._translationsService.t_WeatherComponent_Mon;\n          this.t_WeatherComponent_Tue = this._translationsService.t_WeatherComponent_Tue;\n          this.t_WeatherComponent_Wed = this._translationsService.t_WeatherComponent_Wed;\n          this.t_WeatherComponent_Thu = this._translationsService.t_WeatherComponent_Thu;\n          this.t_WeatherComponent_Fri = this._translationsService.t_WeatherComponent_Fri;\n          this.t_WeatherComponent_Sat = this._translationsService.t_WeatherComponent_Sat;\n          this.t_WeatherComponent_Wind = this._translationsService.t_WeatherComponent_Wind;\n          this.t_WeatherComponent_Visibility = this._translationsService.t_WeatherComponent_Visibility;\n          this.t_WeatherComponent_CloudCover = this._translationsService.t_WeatherComponent_CloudCover;\n          this.t_WeatherComponent_RainProbability = this._translationsService.t_WeatherComponent_RainProbability;\n          this.t_WeatherComponent_SnowProbability = this._translationsService.t_WeatherComponent_SnowProbability;\n          this.t_WeatherComponent_IceProbability = this._translationsService.t_WeatherComponent_IceProbability;\n          this.t_WeatherComponent_Sunrise = this._translationsService.t_WeatherComponent_Sunrise;\n          this.t_WeatherComponent_Sunset = this._translationsService.t_WeatherComponent_Sunset;\n          this.t_WeatherComponent_Moonrise = this._translationsService.t_WeatherComponent_Moonrise;\n          this.t_WeatherComponent_Moonset = this._translationsService.t_WeatherComponent_Moonset;\n          this.t_WeatherComponent_MoonAge = this._translationsService.t_WeatherComponent_MoonAge;\n          this.t_WeatherComponent_Rain = this._translationsService.t_WeatherComponent_Rain;\n          this.t_WeatherComponent_Clouds = this._translationsService.t_WeatherComponent_Clouds;\n        }\n      }\n    }]);\n\n    return WeatherComponent;\n  }();\n\n  WeatherComponent.ɵfac = function WeatherComponent_Factory(t) {\n    return new (t || WeatherComponent)(i0.ɵɵdirectiveInject(i1.FirebaseAuthService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.WeatherService), i0.ɵɵdirectiveInject(i4.UserSettingsService), i0.ɵɵdirectiveInject(i5.TranslationsService));\n  };\n\n  WeatherComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: WeatherComponent,\n    selectors: [[\"app-weather\"]],\n    decls: 36,\n    vars: 18,\n    consts: [[1, \"panel\", \"panel-primary\", \"top-50\", \"panel-margin\"], [1, \"panel-heading\"], [1, \"panel-title\"], [1, \"panel-body\"], [\"class\", \"alert alert-danger\", 4, \"ngIf\"], [1, \"row\"], [1, \"col-md-3\"], [3, \"latitude\", \"longitude\", \"zoom\", \"mapClick\"], [3, \"latitude\", \"longitude\", \"markerDraggable\", \"dragEnd\"], [1, \"col-md-2\"], [4, \"ngIf\"], [1, \"col-md-7\"], [\"class\", \"pull-right\", 4, \"ngIf\"], [1, \"col-md-12\"], [1, \"col-md-6\"], [\"baseChart\", \"\", 1, \"chart\", 3, \"datasets\", \"labels\", \"chartType\"], [1, \"col-md-4\"], [1, \"containter\", \"text-center\"], [\"src\", \"http://api.sat24.com/animated/EU/visual/2/Central%20European%20Standard%20Time/3937527\", \"width\", \"600\", \"height\", \"400\"], [1, \"alert\", \"alert-danger\"], [\"class\", \"containter text-center box-shadow\", 3, \"ngClass\", 4, \"ngIf\"], [1, \"containter\", \"text-center\", \"box-shadow\", 3, \"ngClass\"], [1, \"color-white\"], [3, \"src\"], [1, \"bottom-10\", \"top-negative-10\"], [1, \"top-negative-10\"], [1, \"pull-right\"], [\"class\", \"inline-block\", 4, \"ngFor\", \"ngForOf\"], [1, \"inline-block\"], [1, \"containter\", \"text-center\", \"box-shadow\", \"daily-forecast-display-night\"], [1, \"color-yellow\"]],\n    template: function WeatherComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h3\", 2);\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(4, \"div\", 3)(5, \"h3\");\n        i0.ɵɵtext(6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"br\");\n        i0.ɵɵtemplate(8, WeatherComponent_div_8_Template, 2, 1, \"div\", 4);\n        i0.ɵɵelementStart(9, \"div\", 5)(10, \"div\", 6)(11, \"google-map\", 7);\n        i0.ɵɵlistener(\"mapClick\", function WeatherComponent_Template_google_map_mapClick_11_listener($event) {\n          return ctx.onMapClick($event);\n        });\n        i0.ɵɵelementStart(12, \"map-marker\", 8);\n        i0.ɵɵlistener(\"dragEnd\", function WeatherComponent_Template_map_marker_dragEnd_12_listener($event) {\n          return ctx.onMarkerDragEnd($event);\n        });\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(13, \"div\", 9);\n        i0.ɵɵtemplate(14, WeatherComponent_div_14_Template, 2, 1, \"div\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"div\", 11);\n        i0.ɵɵtemplate(16, WeatherComponent_div_16_Template, 2, 1, \"div\", 12);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(17, \"br\");\n        i0.ɵɵelementStart(18, \"div\", 5)(19, \"div\", 13);\n        i0.ɵɵtemplate(20, WeatherComponent_div_20_Template, 2, 1, \"div\", 10);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(21, \"br\");\n        i0.ɵɵelementStart(22, \"div\", 5)(23, \"div\", 14)(24, \"div\");\n        i0.ɵɵelement(25, \"canvas\", 15);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(26, \"div\", 14)(27, \"div\");\n        i0.ɵɵelement(28, \"canvas\", 15);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelement(29, \"br\");\n        i0.ɵɵelementStart(30, \"div\", 5);\n        i0.ɵɵelement(31, \"div\", 16);\n        i0.ɵɵelementStart(32, \"div\", 16)(33, \"div\", 17);\n        i0.ɵɵelement(34, \"img\", 18);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(35, \"div\", 16);\n        i0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(ctx.t_WeatherComponent_PanelTitle);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(ctx.t_WeatherComponent_MapTitle);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorMessageWeatherService != \"\");\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"latitude\", ctx.lat)(\"longitude\", ctx.lng)(\"zoom\", ctx.zoom);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"latitude\", ctx.lat)(\"longitude\", ctx.lng)(\"markerDraggable\", ctx.draggable);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.location && ctx.currentConditions);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.location && ctx.dailyForecasts);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.location && ctx.hourlyForecasts);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"datasets\", ctx.barChartDataDaily)(\"labels\", ctx.barChartLabelsDaily)(\"chartType\", ctx.barChartType);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"datasets\", ctx.barChartDataHourly)(\"labels\", ctx.barChartLabelsHourly)(\"chartType\", ctx.barChartType);\n      }\n    },\n    dependencies: [i6.NgClass, i6.NgForOf, i6.NgIf, i7.BaseChartDirective, i8.GoogleMap, i8.MapMarker],\n    styles: [\".top-50[_ngcontent-%COMP%]{margin-top:50px}.panel-margin[_ngcontent-%COMP%]{margin-left:10px;margin-right:20px}.current-weather-display-day[_ngcontent-%COMP%]{background-color:#25b3ffc4;padding-left:2px;padding-top:1px;width:270px}.current-weather-display-night[_ngcontent-%COMP%]{background-color:#282828c4;padding-left:2px;padding-top:1px;width:270px;color:#fff}.daily-forecast-display-day[_ngcontent-%COMP%]{background-color:#25b3ffc4;padding-left:2px;padding-top:1px;width:200px}.daily-forecast-display-night[_ngcontent-%COMP%]{background-color:#282828c4;padding-left:2px;padding-top:1px;width:200px;color:#fff}.hourly-forecast-display-day[_ngcontent-%COMP%]{background-color:#25b3ffc4;padding-left:2px;padding-top:1px;width:148px}.hourly-forecast-display-night[_ngcontent-%COMP%]{background-color:#282828c4;padding-left:2px;padding-top:1px;width:148px;color:#fff}.bottom-10[_ngcontent-%COMP%]{padding-bottom:10px}.top-negative-10[_ngcontent-%COMP%]{margin-top:-10px}.box-shadow[_ngcontent-%COMP%]{box-shadow:10px 10px 24px 8px #0000005e}.inline-block[_ngcontent-%COMP%]{display:inline-block;padding-right:4px}.color-yellow[_ngcontent-%COMP%]{color:#ff0}.color-white[_ngcontent-%COMP%]{color:#fff}.margin-auto[_ngcontent-%COMP%]{margin:auto}.chart[_ngcontent-%COMP%]{display:block}.sebm-google-map-container[_ngcontent-%COMP%]{height:370px}\"]\n  });\n  return WeatherComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}