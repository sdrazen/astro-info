{"ast":null,"code":"import _classCallCheck from \"C:/Users/Fritz7x64/Documents/Angular/astro-info/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Fritz7x64/Documents/Angular/astro-info/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as i0 from \"@angular/core\";\nexport var FirebaseAuthService = /*#__PURE__*/(function () {\n  var FirebaseAuthService = /*#__PURE__*/function () {\n    function FirebaseAuthService() {\n      _classCallCheck(this, FirebaseAuthService);\n\n      this.isLoggedIn = false;\n    }\n\n    _createClass(FirebaseAuthService, [{\n      key: \"listenForAuthStateChanges\",\n      value: function listenForAuthStateChanges() {\n        var _this = this;\n\n        var p = new Promise(function (resolve, reject) {\n          firebase.auth().onAuthStateChanged(function (user) {\n            if (user != null) {\n              _this.isLoggedIn = true;\n              resolve(user);\n            } else {\n              _this.isLoggedIn = false;\n              reject(false);\n            }\n          });\n        });\n        return p;\n      }\n    }, {\n      key: \"userGoogleSignIn\",\n      value: function userGoogleSignIn() {\n        var p = new Promise(function (resolve, reject) {\n          var provider = new firebase.auth.GoogleAuthProvider();\n          firebase.auth().signInWithPopup(provider).then(function (u) {\n            resolve(true);\n          }).catch(function (e) {\n            reject(e.message);\n          });\n        });\n        return p;\n      }\n    }, {\n      key: \"userFacebookSignIn\",\n      value: function userFacebookSignIn() {\n        var p = new Promise(function (resolve, reject) {\n          var provider = new firebase.auth.FacebookAuthProvider();\n          firebase.auth().signInWithPopup(provider).then(function (u) {\n            resolve(true);\n          }).catch(function (e) {\n            reject(e.message);\n          });\n        });\n        return p;\n      }\n    }, {\n      key: \"userGithubSignIn\",\n      value: function userGithubSignIn() {\n        var p = new Promise(function (resolve, reject) {\n          var provider = new firebase.auth.GithubAuthProvider();\n          firebase.auth().signInWithPopup(provider).then(function (u) {\n            resolve(true);\n          }).catch(function (e) {\n            reject(e.message);\n          });\n        });\n        return p;\n      }\n    }, {\n      key: \"userSignOut\",\n      value: function userSignOut() {\n        firebase.auth().signOut();\n      }\n    }]);\n\n    return FirebaseAuthService;\n  }();\n\n  FirebaseAuthService.ɵfac = function FirebaseAuthService_Factory(t) {\n    return new (t || FirebaseAuthService)();\n  };\n\n  FirebaseAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FirebaseAuthService,\n    factory: FirebaseAuthService.ɵfac\n  });\n  return FirebaseAuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}