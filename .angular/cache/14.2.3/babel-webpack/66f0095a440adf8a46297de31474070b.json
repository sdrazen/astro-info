{"ast":null,"code":"import _toConsumableArray from \"C:/Users/Fritz7x64/Documents/Angular/astro-info/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"C:/Users/Fritz7x64/Documents/Angular/astro-info/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Fritz7x64/Documents/Angular/astro-info/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Directive, Input, Output, NgModule, Optional } from '@angular/core';\nimport { Chart, registerables, defaults } from 'chart.js';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { merge } from 'lodash-es';\nimport { BehaviorSubject } from 'rxjs';\nvar ThemeService = /*#__PURE__*/(function () {\n  var ThemeService = /*#__PURE__*/function () {\n    function ThemeService() {\n      _classCallCheck(this, ThemeService);\n\n      this.colorschemesOptions = new BehaviorSubject(undefined);\n    }\n\n    _createClass(ThemeService, [{\n      key: \"setColorschemesOptions\",\n      value: function setColorschemesOptions(options) {\n        this.pColorschemesOptions = options;\n        this.colorschemesOptions.next(options);\n      }\n    }, {\n      key: \"getColorschemesOptions\",\n      value: function getColorschemesOptions() {\n        return this.pColorschemesOptions;\n      }\n    }]);\n\n    return ThemeService;\n  }();\n\n  ThemeService.ɵfac = function ThemeService_Factory(t) {\n    return new (t || ThemeService)();\n  };\n\n  ThemeService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ThemeService,\n    factory: ThemeService.ɵfac,\n    providedIn: 'root'\n  });\n  return ThemeService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar BaseChartDirective = /*#__PURE__*/(function () {\n  var BaseChartDirective = /*#__PURE__*/function () {\n    function BaseChartDirective(element, zone, themeService) {\n      var _this = this;\n\n      _classCallCheck(this, BaseChartDirective);\n\n      this.zone = zone;\n      this.themeService = themeService;\n      this.type = 'bar';\n      this.plugins = [];\n      this.chartClick = new EventEmitter();\n      this.chartHover = new EventEmitter();\n      this.subs = [];\n      this.ctx = element.nativeElement.getContext('2d');\n      this.subs.push(this.themeService.colorschemesOptions.pipe(distinctUntilChanged()).subscribe(function (r) {\n        return _this.themeChanged(r);\n      }));\n    }\n\n    _createClass(BaseChartDirective, [{\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        var requireRender = ['type'];\n        var propertyNames = Object.getOwnPropertyNames(changes);\n\n        if (propertyNames.some(function (key) {\n          return requireRender.includes(key);\n        }) || propertyNames.every(function (key) {\n          return changes[key].isFirstChange();\n        })) {\n          this.render();\n        } else {\n          var config = this.getChartConfiguration();\n\n          if (this.chart) {\n            Object.assign(this.chart.config.data, config.data);\n\n            if (this.chart.config.plugins) {\n              Object.assign(this.chart.config.plugins, config.plugins);\n            }\n\n            if (this.chart.config.options) {\n              Object.assign(this.chart.config.options, config.options);\n            }\n          }\n\n          this.update();\n        }\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        if (this.chart) {\n          this.chart.destroy();\n          this.chart = void 0;\n        }\n\n        this.subs.forEach(function (s) {\n          return s.unsubscribe();\n        });\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this2 = this;\n\n        if (this.chart) {\n          this.chart.destroy();\n        }\n\n        Chart.register.apply(Chart, _toConsumableArray(this.plugins));\n        return this.zone.runOutsideAngular(function () {\n          return _this2.chart = new Chart(_this2.ctx, _this2.getChartConfiguration());\n        });\n      }\n    }, {\n      key: \"update\",\n      value: function update(duration) {\n        var _this3 = this;\n\n        if (this.chart) {\n          this.zone.runOutsideAngular(function () {\n            var _a;\n\n            return (_a = _this3.chart) === null || _a === void 0 ? void 0 : _a.update(duration);\n          });\n        }\n      }\n    }, {\n      key: \"hideDataset\",\n      value: function hideDataset(index, hidden) {\n        if (this.chart) {\n          this.chart.getDatasetMeta(index).hidden = hidden;\n          this.update();\n        }\n      }\n    }, {\n      key: \"isDatasetHidden\",\n      value: function isDatasetHidden(index) {\n        var _a, _b;\n\n        return (_b = (_a = this.chart) === null || _a === void 0 ? void 0 : _a.getDatasetMeta(index)) === null || _b === void 0 ? void 0 : _b.hidden;\n      }\n    }, {\n      key: \"toBase64Image\",\n      value: function toBase64Image() {\n        var _a;\n\n        return (_a = this.chart) === null || _a === void 0 ? void 0 : _a.toBase64Image();\n      }\n    }, {\n      key: \"themeChanged\",\n      value: function themeChanged(options) {\n        this.themeOverrides = options;\n\n        if (this.chart) {\n          if (this.chart.config.options) {\n            Object.assign(this.chart.config.options, this.getChartOptions());\n          }\n\n          this.update();\n        }\n      }\n    }, {\n      key: \"getChartOptions\",\n      value: function getChartOptions() {\n        var _this4 = this;\n\n        return merge({\n          onHover: function onHover(event, active) {\n            var _a;\n\n            if (!_this4.chartHover.observed && !((_a = _this4.chartHover.observers) === null || _a === void 0 ? void 0 : _a.length)) {\n              return;\n            }\n\n            _this4.zone.run(function () {\n              return _this4.chartHover.emit({\n                event: event,\n                active: active\n              });\n            });\n          },\n          onClick: function onClick(event, active) {\n            var _a;\n\n            if (!_this4.chartClick.observed && !((_a = _this4.chartClick.observers) === null || _a === void 0 ? void 0 : _a.length)) {\n              return;\n            }\n\n            _this4.zone.run(function () {\n              return _this4.chartClick.emit({\n                event: event,\n                active: active\n              });\n            });\n          }\n        }, this.themeOverrides, this.options, {\n          plugins: {\n            legend: {\n              display: this.legend\n            }\n          }\n        });\n      }\n    }, {\n      key: \"getChartConfiguration\",\n      value: function getChartConfiguration() {\n        return {\n          type: this.type,\n          data: this.getChartData(),\n          options: this.getChartOptions()\n        };\n      }\n    }, {\n      key: \"getChartData\",\n      value: function getChartData() {\n        return this.data ? this.data : {\n          labels: this.labels || [],\n          datasets: this.datasets || []\n        };\n      }\n    }]);\n\n    return BaseChartDirective;\n  }();\n\n  BaseChartDirective.ɵfac = function BaseChartDirective_Factory(t) {\n    return new (t || BaseChartDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(ThemeService));\n  };\n\n  BaseChartDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: BaseChartDirective,\n    selectors: [[\"canvas\", \"baseChart\", \"\"]],\n    inputs: {\n      type: \"type\",\n      legend: \"legend\",\n      data: \"data\",\n      options: \"options\",\n      plugins: \"plugins\",\n      labels: \"labels\",\n      datasets: \"datasets\"\n    },\n    outputs: {\n      chartClick: \"chartClick\",\n      chartHover: \"chartHover\"\n    },\n    exportAs: [\"base-chart\"],\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n  return BaseChartDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar baseColors = [[255, 99, 132], [54, 162, 235], [255, 206, 86], [231, 233, 237], [75, 192, 192], [151, 187, 205], [220, 220, 220], [247, 70, 74], [70, 191, 189], [253, 180, 92], [148, 159, 177], [77, 83, 96]];\nvar builtInDefaults = {\n  datasets: {\n    line: {\n      backgroundColor: function backgroundColor(context) {\n        return rgba(generateColor(context.datasetIndex), 0.4);\n      },\n      borderColor: function borderColor(context) {\n        return rgba(generateColor(context.datasetIndex), 1);\n      },\n      pointBackgroundColor: function pointBackgroundColor(context) {\n        return rgba(generateColor(context.datasetIndex), 1);\n      },\n      pointBorderColor: '#fff',\n      pointHoverBackgroundColor: '#fff',\n      pointHoverBorderColor: function pointHoverBorderColor(context) {\n        return rgba(generateColor(context.datasetIndex), 0.8);\n      }\n    },\n    bar: {\n      backgroundColor: function backgroundColor(context) {\n        return rgba(generateColor(context.datasetIndex), 0.6);\n      },\n      borderColor: function borderColor(context) {\n        return rgba(generateColor(context.datasetIndex), 1);\n      },\n      hoverBackgroundColor: function hoverBackgroundColor(context) {\n        return rgba(generateColor(context.datasetIndex), 0.8);\n      },\n      hoverBorderColor: function hoverBorderColor(context) {\n        return rgba(generateColor(context.datasetIndex), 1);\n      }\n    },\n\n    get radar() {\n      return this.line;\n    },\n\n    doughnut: {\n      backgroundColor: function backgroundColor(context) {\n        return rgba(generateColor(context.dataIndex), 0.6);\n      },\n      borderColor: '#fff',\n      hoverBackgroundColor: function hoverBackgroundColor(context) {\n        return rgba(generateColor(context.dataIndex), 1);\n      },\n      hoverBorderColor: function hoverBorderColor(context) {\n        return rgba(generateColor(context.dataIndex), 1);\n      }\n    },\n\n    get pie() {\n      return this.doughnut;\n    },\n\n    polarArea: {\n      backgroundColor: function backgroundColor(context) {\n        return rgba(generateColor(context.dataIndex), 0.6);\n      },\n      borderColor: function borderColor(context) {\n        return rgba(generateColor(context.dataIndex), 1);\n      },\n      hoverBackgroundColor: function hoverBackgroundColor(context) {\n        return rgba(generateColor(context.dataIndex), 0.8);\n      },\n      hoverBorderColor: function hoverBorderColor(context) {\n        return rgba(generateColor(context.dataIndex), 1);\n      }\n    },\n\n    get bubble() {\n      return this.doughnut;\n    },\n\n    get scatter() {\n      return this.doughnut;\n    },\n\n    get area() {\n      return this.polarArea;\n    }\n\n  }\n};\n\nfunction rgba(colour, alpha) {\n  return 'rgba(' + colour.concat(alpha).join(',') + ')';\n}\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction getRandomColor() {\n  return [getRandomInt(0, 255), getRandomInt(0, 255), getRandomInt(0, 255)];\n}\n/**\n * Generate colors\n */\n\n\nfunction generateColor() {\n  var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  return baseColors[index] || getRandomColor();\n}\n\nvar NgChartsConfiguration = /*#__PURE__*/(function () {\n  var NgChartsConfiguration = /*#__PURE__*/_createClass(function NgChartsConfiguration() {\n    _classCallCheck(this, NgChartsConfiguration);\n  });\n\n  NgChartsConfiguration.ɵfac = function NgChartsConfiguration_Factory(t) {\n    return new (t || NgChartsConfiguration)();\n  };\n\n  NgChartsConfiguration.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: NgChartsConfiguration,\n    factory: NgChartsConfiguration.ɵfac,\n    providedIn: 'root'\n  });\n  return NgChartsConfiguration;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nChart.register.apply(Chart, _toConsumableArray(registerables));\nvar NgChartsModule = /*#__PURE__*/(function () {\n  var NgChartsModule = /*#__PURE__*/function () {\n    function NgChartsModule(config) {\n      _classCallCheck(this, NgChartsModule);\n\n      if (config === null || config === void 0 ? void 0 : config.plugins) Chart.register.apply(Chart, _toConsumableArray(config === null || config === void 0 ? void 0 : config.plugins));\n      var ngChartsDefaults = merge(builtInDefaults, (config === null || config === void 0 ? void 0 : config.defaults) || {});\n      defaults.set(ngChartsDefaults);\n    }\n\n    _createClass(NgChartsModule, null, [{\n      key: \"forRoot\",\n      value: function forRoot(config) {\n        return {\n          ngModule: NgChartsModule,\n          providers: [{\n            provide: NgChartsConfiguration,\n            useValue: config\n          }]\n        };\n      }\n    }]);\n\n    return NgChartsModule;\n  }();\n\n  NgChartsModule.ɵfac = function NgChartsModule_Factory(t) {\n    return new (t || NgChartsModule)(i0.ɵɵinject(NgChartsConfiguration, 8));\n  };\n\n  NgChartsModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: NgChartsModule\n  });\n  NgChartsModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return NgChartsModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Public API Surface of ng2-charts\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { BaseChartDirective, NgChartsConfiguration, NgChartsModule, ThemeService, baseColors }; //# sourceMappingURL=ng2-charts.mjs.map","map":null,"metadata":{},"sourceType":"module"}