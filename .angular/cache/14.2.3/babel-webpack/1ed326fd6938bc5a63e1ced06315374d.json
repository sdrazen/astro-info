{"ast":null,"code":"import _classCallCheck from \"C:/Users/Fritz7x64/Documents/Angular/astro-info/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Fritz7x64/Documents/Angular/astro-info/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as i0 from \"@angular/core\";\nexport var CalculationsService = /*#__PURE__*/(function () {\n  var CalculationsService = /*#__PURE__*/function () {\n    function CalculationsService() {\n      _classCallCheck(this, CalculationsService);\n    }\n\n    _createClass(CalculationsService, [{\n      key: \"getDaysFromJ2000\",\n      value: function getDaysFromJ2000(year, month, day, hours, minutes) {\n        var _this = this;\n\n        var daysFromJ2000 = 0;\n        var daysToBeginningOfMonth = [[1, 0, 0], [2, 31, 31], [3, 59, 60], [4, 90, 91], [5, 120, 121], [6, 151, 152], [7, 181, 182], [8, 212, 213], [9, 243, 244], [10, 273, 274], [11, 304, 305], [12, 334, 335]];\n        var daysSinceJ2000ToBeginningOfYear = [[1998, -731.5], [1999, -366.5], [2000, -1.5], [2001, 364.5], [2002, 729.5], [2003, 1094.5], [2004, 1459.5], [2005, 1825.5], [2006, 2190.5], [2007, 2555.5], [2008, 2920.5], [2009, 3286.5], [2010, 3651.5], [2011, 4016.5], [2012, 4381.5], [2013, 4747.5], [2014, 5112.5], [2015, 5477.5], [2016, 5842.5], [2017, 6208.5], [2018, 6573.5], [2019, 6938.5], [2020, 7303.5], [2021, 7669.5]]; // Calculate fraction of the day\n\n        var fractionOfDay = (hours + minutes / 60) / 24; // Find number of days to the beginning of month\n\n        var numberOfDaysToBeginningOfMonth = 0;\n        daysToBeginningOfMonth.forEach(function (element) {\n          if (element[0] === month) {\n            if (_this.isLeapYear(year)) {\n              numberOfDaysToBeginningOfMonth = element[2];\n            } else {\n              numberOfDaysToBeginningOfMonth = element[1];\n            }\n          }\n        }); // Find days since J2000.0 to the beginning of the year\n\n        var numberOfDaysSinceJ2000ToBeginningOfYear = 0;\n        daysSinceJ2000ToBeginningOfYear.forEach(function (element) {\n          if (element[0] === year) {\n            numberOfDaysSinceJ2000ToBeginningOfYear = element[1];\n          }\n        }); // Add these calculations to get daysFromJ2000\n\n        daysFromJ2000 = fractionOfDay + numberOfDaysToBeginningOfMonth + day + numberOfDaysSinceJ2000ToBeginningOfYear;\n        return daysFromJ2000;\n      }\n    }, {\n      key: \"getLocalSiderialTime\",\n      value: function getLocalSiderialTime(year, month, day, hours, minutes, LON) {\n        var localSiderialTime = 0; // Calculate fraction of the day\n\n        var UT = hours + minutes / 60; // Calculate days from J2000\n\n        var daysFromJ2000 = this.getDaysFromJ2000(year, month, day, hours, minutes); // Calculate local siderial time, add 360 if negative\n\n        localSiderialTime = 100.46 + 0.985647 * daysFromJ2000 + LON + 15 * UT < 0 ? 100.46 + 0.985647 * daysFromJ2000 + LON + 15 * UT + 360 : 100.46 + 0.985647 * daysFromJ2000 + LON + 15 * UT;\n        return localSiderialTime;\n      }\n    }, {\n      key: \"getHourAngle\",\n      value: function getHourAngle(localSiderialTime, RA) {\n        return localSiderialTime - RA < 0 ? localSiderialTime - RA + 360 : localSiderialTime - RA;\n      }\n    }, {\n      key: \"getAltAz\",\n      value: function getAltAz(RA, DEC, LAT, LON, year, month, day, hours, minutes) {\n        // RA - hours decimal\n        // DEC, LAT, LON - degrees decimal\n        // Result - degrees decimal (array of two numbers, altitude and azimuth)\n        var AltAz = [];\n        var HA = this.getHourAngle(this.getLocalSiderialTime(year, month, day, hours, minutes, LON), this.convertRAToDegreesDecimal(RA));\n        var sinDEC = Math.sin(this.convertDegreesToRadians(DEC));\n        var sinLAT = Math.sin(this.convertDegreesToRadians(LAT));\n        var sinHA = Math.sin(this.convertDegreesToRadians(HA));\n        var cosDEC = Math.cos(this.convertDegreesToRadians(DEC));\n        var cosLAT = Math.cos(this.convertDegreesToRadians(LAT));\n        var cosHA = Math.cos(this.convertDegreesToRadians(HA));\n        var sinALT = sinDEC * sinLAT + cosDEC * cosLAT * cosHA;\n        var ALT = this.convertRadiansToDegrees(Math.asin(sinALT));\n        var cosALT = Math.cos(this.convertDegreesToRadians(ALT));\n        var cosA = (sinDEC - sinALT * sinLAT) / (cosALT * cosLAT);\n        var A = this.convertRadiansToDegrees(Math.acos(cosA));\n        var AZ = sinHA > 0 ? 360 - A : A;\n        AltAz = [ALT, AZ];\n        return AltAz;\n      }\n    }, {\n      key: \"isLeapYear\",\n      value: function isLeapYear(year) {\n        return year % 400 ? year % 100 ? year % 4 ? false : true : false : true;\n      }\n    }, {\n      key: \"convertToHours\",\n      value: function convertToHours(hours, minutes, seconds) {\n        return hours + minutes / 60 + seconds / 3600;\n      }\n    }, {\n      key: \"convertToDegreesDecimal\",\n      value: function convertToDegreesDecimal(degrees, minutes, seconds) {\n        return degrees < 0 ? -(Math.abs(degrees) + minutes / 60 + seconds / 3600) : degrees + minutes / 60 + seconds / 3600;\n      }\n    }, {\n      key: \"convertRAToDegreesDecimal\",\n      value: function convertRAToDegreesDecimal(RA) {\n        return RA * 15;\n      }\n    }, {\n      key: \"convertDegreesToRadians\",\n      value: function convertDegreesToRadians(degrees) {\n        return degrees * Math.PI / 180;\n      }\n    }, {\n      key: \"convertRadiansToDegrees\",\n      value: function convertRadiansToDegrees(radians) {\n        return radians / (Math.PI / 180);\n      }\n    }, {\n      key: \"convertDegreesDecimalToDegreesMinutesSeconds\",\n      value: function convertDegreesDecimalToDegreesMinutesSeconds(degrees) {\n        var deg = parseInt(degrees.toString());\n        var fraction = Math.abs(degrees - deg);\n        var min = parseInt((fraction * 60).toString());\n        var sec = Math.round(fraction * 3600 - min * 60);\n        return [deg, min, sec];\n      }\n    }]);\n\n    return CalculationsService;\n  }();\n\n  CalculationsService.ɵfac = function CalculationsService_Factory(t) {\n    return new (t || CalculationsService)();\n  };\n\n  CalculationsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CalculationsService,\n    factory: CalculationsService.ɵfac\n  });\n  return CalculationsService;\n})();","map":null,"metadata":{},"sourceType":"module"}